基于Floyd算法SDN网络实时性能研究

0 引言
SDN是一种非常先进的网络架构，可以更好地满足下一代网络的发展需要。区别于传统网络架构，它可将网络设备上的控制权分离出来，由集中的控制器管理，不依赖底层设备。然而在面对物联网（IoT）业务如智能穿戴设备、智慧城市、车联网和工业控制等，网络实时性会是重要要求。因此本文研究一种在SDN集中式控制平面基础上，使用以Floyd算法搜索延时最优路径的思路，以达到网络实时性的全局优化目的。Floyd算法通过一个图的带权邻接矩阵搜索两点间最短路径矩阵，它是一种动态规划算法，稠密图效果最佳，执行效率要高于|V|次Dijkstra和SPFA算法。在研究中我们根据控制器提供的网络实时链路时延情况，计算出业务的较优时延路径，从而给交换机提供动态数据流转发策略。本文利用SDN网络虚拟软件Mininet以及RYU控制器搭建并设置了SDN研究环境，生成自定义网络拓扑结构，通过Floyd算法进行路由搜索，进行SDN网络实时性能研究。

1 RYU、Mininet介绍
1.1 RYU介绍
（图）RYU架构模型
Ryu的事件处理、进程与线程模块：
  1) Applications：该类继承自ryu.base.app_manager.RyuApp，用户逻辑被描述为一个APP。
  2) Event：继承自ryu.controller.event.EventBase，应用程序之间的通信由transmitting and receiving events完成。
  3) Event Queue：每一个application都有一个队列用于接收事件。
  4) Threads：使用第三方库eventlets 运行多线程，线程是非抢占式。
  5) Event loops：创建一个application时，自动生成一个线程，该线程运行一个事件循环。
  6) Additional threads：可以使用hub.spawn()添加其它线程，用来处理特殊的应用
  7) Eventlets：提供线程和事件队列的实现。
  8) Event handlers：使用ryu.controller.handler.set_ev_cls 修饰一个事件处理函数。当该类型的事件触发后，事件处理函数就会被应用程序的事件循环调用。

1.2 Mininet介绍
（图）Mininet框架示意
Mininet是一个轻量级软件定义网络和测试平台；它采用轻量级的虚拟化技术使一个单一的系统看起来像一个完整的网络运行。也可简单理解为SDN网络系统中的一种基于进程虚拟化平台，它支持OpenFlow等各种协议，也可以模拟一个完整的网络主机、链路和交换机在同一台计算机上，且有助于开发、测试和演示OpenFlow和SDN技术；同时也可将此进程虚拟化的平台下代码迁移到真实的环境中。

2 研究环境设计
2.1 虚拟SDN交换机网络
（图）网络拓扑
Mininet中创建16个SDN交换机构成的4X4矩阵网络，每个交换机再连接一台主机.
各接口IP地址规划原则：
主机地址：10.100.X.2 (X∈[1,16]) (h1 ip addr del 10.0.0.1/8 dev h1-eth0;h1 ip addr add 10.100.1.2/24 dev h1-eth0)
交换机eth1地址：10.100.X.1 (X∈[1,16]) (s1 ip addr add 10.100.1.1/24 dev s1-eth1)
交换机之间链路网段：10.A.B.C (A∈[1,16],B∈[1,16],c∈{1,254} 注：A指链路两端交换机标编号较小值；B指链路两端交换机标编号较大值；C取值方式为较小编号交换机设置1，较大标号交换机设置254) (s1 ip addr add 10.1.2.1/24 dev s1-eth2;s2 ip addr add 10.1.2.254/24 dev s2-eth2)
掩码全部设置为C类(255.255.255.0)

2.2 测量网络链路单向时延
2.2.1 时延测量原理
时延测量利用了Ryu的ofp_event.EventOFPPacketIn

Switches模块的数据，获取到了LLDP数据发送时的时间戳，然后和收到的时间戳进行相减，得到了LLDP数据包从控制器下发到交换机A，然后从交换机A到交换机B，再上报给控制器的时延T1



研究环境：
SDN控制器-RYU version 4.9/fedora22-x64
SDN虚拟交换机-mininet version 2.2.1/ubuntu14.04-x86
实验拓扑：
（图）拓扑

1.控制器增加测量网络链路单向时延
LLDP报文延时（delayTime_LLDP）:
测试LLDP报文路径时延，包括控制器到交换机和交换机间的单向链路时延,使用Ryu自带的Switches模块的数据，获取LLDP数据发送时的时间戳，随后和收到的时间戳进行相减。
测量Echo报文延时（delayTime_Echo）:
测试LLDP报文双向时延，包含控制器到交换机的双向链路时延，通过控制器给交换机发送携带有时间戳的echo_request消息，然后解析交换机返回的echo_reply消息，计算双向时延。
业务链路时延（DelayTime_Traffic）:
delayTime_Traffic = delayTime_LLDP - delayTime_Echo_SwitchA / 2 - delayTime_Echo_SwitchB / 2
（图）各链路单向时延的实时结果

2.建立基于时延有向图的邻接矩阵
通过在上一步骤中对于网络各节点之间链路进行单向时延的测量，控制器可以计算和取得出到全网的链路单向时延数据，根据这些时延数据建立各节点基于单向时延有向图，并构成邻接矩阵。
（图）时延有向图的邻接矩阵

3.基于蚁群算法搜索时延最优路径

每只蚂蚁就像蚁群优化算法中一样，根据它在网络上的经验与性能，动态更新路由表项。如果一只蚂蚁因为经过了网络中堵塞的路由而导致了比较大的延迟，那么就对该表项做较大的增强。同时根据信息素挥发机制实现系统的信息更新，从而抛弃过期的路由信息。这样，在当前最优路由出现拥堵现象时，ACR算法就能迅速的搜寻另一条可替代的最优路径，从而提高网络的均衡性、负荷量和利用率。

4.配置并监测时延变化，调优网络
